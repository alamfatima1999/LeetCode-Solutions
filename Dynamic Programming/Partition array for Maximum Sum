class Solution
{
public:
    int maxSumAfterPartitioning(vector<int> &arr, int k)
    {
        int ans = 0;
        int n = arr.size();
        vector<int> dp(n, 0);

        int currSum = 0;
        int currMax = 0;

        for (int i = 0; i < n; i++)
        {
            currMax = 0;
            currSum = 0;
            for (int j = i; j >= max(0, i - k + 1); j--)
            {
                int curr = 0;
                currMax = max(currMax, arr[j]);
                if (j > 0)
                {
                    curr = (i - j + 1) * currMax + dp[j - 1];
                }
                else
                {
                    curr = (i - j + 1) * currMax;
                }
                currSum = max(currSum, curr);
            }
            dp[i] = currSum;
        }
        return dp[n - 1];
    }
};